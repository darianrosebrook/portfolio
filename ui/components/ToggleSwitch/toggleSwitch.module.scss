@use './Toggle.tokens.generated.scss' as toggleTokens;

.toggleSwitch {
  @include toggleTokens.vars;

  position: relative;
  display: inline-flex;
  gap: 0.25rem;
  align-content: center;
  align-items: center;
  max-height: 1.5rem;
  border-radius: var(--toggle-size-radius-full);
  line-height: 1;

  &:focus-within {
    outline: 2px solid var(--toggle-color-border-accent);
    outline-offset: 2px;
  }

  .input {
    all: unset;
    display: inline-flex;
    width: 3rem;
    min-width: 3rem;
    min-height: 1.5rem;
    max-height: 1.5rem;
    background-color: var(--toggle-color-background-track);
    border: 1px solid var(--toggle-color-border-track);
    border-radius: var(--toggle-size-radius-full);
    transition:
      background-color var(--toggle-motion-duration-fast)
        var(--toggle-motion-easing-standard),
      border-color var(--toggle-motion-duration-fast)
        var(--toggle-motion-easing-standard);
    cursor: pointer;

    &:hover {
      background-color: var(--toggle-color-background-trackHover);
    }

    &:focus {
      background-color: var(--toggle-color-background-trackFocus);
    }
  }

  // Size variants
  &.small .input {
    width: 2.5rem;
    min-width: 2.5rem;
    min-height: 1.25rem;
    max-height: 1.25rem;
  }

  &.large .input {
    width: 3.5rem;
    min-width: 3.5rem;
    min-height: 1.75rem;
    max-height: 1.75rem;
  }
}

.input.checked {
  background-color: var(--toggle-color-background-trackChecked);
}

.label {
  margin-left: 0.25rem;
  cursor: pointer;
}

.label::before {
  position: absolute;
  top: 50%;
  display: inline-block;
  width: 1rem;
  height: 1rem;
  background-color: var(--toggle-color-background-thumb);
  border: 1px solid var(--toggle-color-border-thumb);
  border-radius: var(--toggle-size-radius-full);
  transition:
    left var(--toggle-motion-duration-fast) var(--toggle-motion-easing-standard),
    background-color var(--toggle-motion-duration-fast)
      var(--toggle-motion-easing-standard),
    border-color var(--toggle-motion-duration-fast)
      var(--toggle-motion-easing-standard);
  content: ' ';
}

.label.checked::before {
  left: 1.75rem;
  background-color: var(--toggle-color-background-thumbChecked);
}

// Size variants for labels
.toggleSwitch.small .label::before {
  top: 50%;
  width: 0.875rem;
  height: 0.875rem;
}

.toggleSwitch.small .label.checked::before {
  left: 1.5rem;
}

.toggleSwitch.large .label::before {
  top: 50%;
  width: 1.25rem;
  height: 1.25rem;
}

.toggleSwitch.large .label.checked::before {
  left: 2rem;
}

.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.srOnly {
  position: absolute;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border-width: 0;
  white-space: nowrap;
}

/* size variants moved above to avoid descending-specificity issues */

.toggleSwitch .input:disabled {
  background-color: var(--toggle-color-background-trackDisabled);
  cursor: not-allowed;
}

.toggleSwitch .input:disabled + .label {
  color: var(--toggle-color-foreground-labelDisabled);
  cursor: not-allowed;
}

.toggleSwitchGroup {
  display: inline-flex;
  gap: var(--toggle-spacing-gap-default);
}

.vertical {
  flex-direction: column;
  align-items: flex-start;
}

.horizontal {
  flex-direction: row;
  align-items: center;
}

@media (prefers-reduced-motion: reduce) {
  .input,
  .label::before {
    transition: none;
  }
}
