name: Component Standards Validation

on:
  pull_request:
    paths:
      - 'ui/components/**'
      - 'scripts/validateComponents.mjs'
      - 'ui/COMPONENT_STANDARDS.md'
  push:
    branches: [main]
    paths:
      - 'ui/components/**'

jobs:
  validate-components:
    name: Validate Component Standards
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate all components
        run: npm run validate:components

      - name: Run component tests
        run: npm test -- ui/components

      - name: Check for accessibility violations
        run: npm test -- --testNamePattern="Accessibility|a11y"

  component-coverage:
    name: Component Test Coverage
    runs-on: ubuntu-latest
    needs: validate-components

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage -- ui/components

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./coverage
          flags: components
          name: component-coverage

  design-tokens-validation:
    name: Validate Design Token Usage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate design tokens
        run: npm run tokens:validate

      - name: Build tokens
        run: npm run tokens:build

      - name: Check for hardcoded values in components
        run: |
          # Check for hardcoded colors (hex, rgb, hsl)
          if grep -r --include="*.scss" --include="*.css" -E "#[0-9a-fA-F]{3,6}|rgb\(|hsl\(" ui/components/; then
            echo "❌ Found hardcoded color values in components. Use design tokens instead."
            exit 1
          fi

          # Check for hardcoded spacing values
          if grep -r --include="*.scss" --include="*.css" -E "[0-9]+px(?!.*var\()" ui/components/; then
            echo "⚠️ Found hardcoded pixel values. Consider using design tokens for spacing."
            # Don't fail for now, just warn
          fi

          echo "✅ No hardcoded color values found in components"

  contract-validation:
    name: Validate Component Contracts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate contract files exist
        run: |
          missing_contracts=0
          for component_dir in ui/components/*/; do
            component_name=$(basename "$component_dir")
            contract_file="$component_dir$component_name.contract.json"
            
            if [ ! -f "$contract_file" ]; then
              echo "❌ Missing contract file: $contract_file"
              missing_contracts=$((missing_contracts + 1))
            fi
          done

          if [ $missing_contracts -gt 0 ]; then
            echo "❌ Found $missing_contracts components without contract files"
            echo "Run 'npm run generate:contracts' to create missing contracts"
            exit 1
          fi

          echo "✅ All components have contract files"

      - name: Validate contract schemas
        run: |
          # Validate each contract file against the schema
          for contract_file in ui/components/*/*.contract.json; do
            echo "Validating $contract_file..."
            
            # Basic JSON validation
            if ! jq empty "$contract_file" 2>/dev/null; then
              echo "❌ Invalid JSON in $contract_file"
              exit 1
            fi
            
            # Check required fields
            required_fields=("name" "layer" "anatomy" "a11y" "tokens")
            for field in "${required_fields[@]}"; do
              if ! jq -e ".$field" "$contract_file" >/dev/null; then
                echo "❌ Missing required field '$field' in $contract_file"
                exit 1
              fi
            done
          done

          echo "✅ All contract files are valid"
